close all; clear; clc;
% Read the CSV data

GraphGood();


data = readmatrix('static_data_summary.csv', 'NumHeaderLines', 1);

% Sort data by Velocity, AOA, and then Phase Angle
sorted_data = sortrows(data, [4, 5, 3]); % Sort by Velocity (4th column), AOA (5th column), Phase Angle (3rd column)
 
% Extract sorted columns
lift_mean = sorted_data(:, 1);
drag_mean = sorted_data(:, 2);
phase_angle = sorted_data(:, 3);
velocity = sorted_data(:, 4);
aoa = sorted_data(:, 5);

% Extract unique AOAs
unique_aoas = unique(aoa);

%% LIFT + DRAG VS PHASE ANGLE VS VELOCITY
close all;
for a = 1:length(unique_aoas)
    current_aoa = unique_aoas(a);
    
    % Filter data for the current AOA
    current_aoa_data = sorted_data(aoa == current_aoa, :);
    
    % Extract relevant columns
    lift_mean_current_aoa = current_aoa_data(:, 1);
    drag_mean_current_aoa = current_aoa_data(:, 2);
    phase_angle_current_aoa = current_aoa_data(:, 3);
    velocity_current_aoa = current_aoa_data(:, 4);
    
    % Plot lift vs phase angle for each velocity
    figure('Units', 'centimeters', 'Position', [10, 10, 12, 10]);
    hold on;
    unique_velocities = unique(velocity_current_aoa);
    
    for v = 1:length(unique_velocities)
        % Filter data for the current velocity
        current_velocity_data = current_aoa_data(velocity_current_aoa == unique_velocities(v), :);
        
        % Extract phase angle and lift for the current velocity
        phase_angle_current = current_velocity_data(:, 3);
        lift_current = current_velocity_data(:, 1);
        
        % Plot lift
        plot(phase_angle_current, lift_current, 'o-', 'LineWidth', 1.5, 'DisplayName', sprintf('%.1f m/s', unique_velocities(v)));
    end
    
    title(sprintf('Lift vs Phase Angle for AOA = %.1f deg', current_aoa), 'Interpreter', 'latex');
    xlabel('Phase Angle (deg)', 'Interpreter', 'latex');
    ylabel('Lift Mean (N)', 'Interpreter', 'latex');
    legend('show', 'Location', 'best');
    grid on; box on; grid minor;
    xlim([0, 360]);
    ax = gca;
    ax.XMinorTick = 'on';
    ax.XAxis.MinorTickValues = 0:40:360;
    ax.XTick = 0:40:360; % Set major axis to have 40 deg increments
    hold off;
    
    % Plot drag vs phase angle for each velocity
    figure('Units', 'centimeters', 'Position', [10, 10, 12, 10]);
    hold on;
    
    for v = 1:length(unique_velocities)
        % Filter data for the current velocity
        current_velocity_data = current_aoa_data(velocity_current_aoa == unique_velocities(v), :);
        
        % Extract phase angle and drag for the current velocity
        phase_angle_current = current_velocity_data(:, 3);
        drag_current = current_velocity_data(:, 2);
        
        % Plot drag
        plot(phase_angle_current, drag_current, 'x-', 'LineWidth', 1.5, 'DisplayName', sprintf('%.1f m/s', unique_velocities(v)));
    end
    
    title(sprintf('Drag vs Phase Angle for AOA = %.1f deg', current_aoa), 'Interpreter', 'latex');
    xlabel('Phase Angle (deg)', 'Interpreter', 'latex');
    ylabel('Drag Mean (N)', 'Interpreter', 'latex');
    legend('show', 'Location', 'best');
    grid on; box on; grid minor;
    xlim([0, 360]);
    ax = gca;
    ax.XMinorTick = 'on';
    ax.XAxis.MinorTickValues = 0:40:360;
    ax.XTick = 0:40:360; % Set major axis to have 40 deg increments
    hold off;
end

% ... existing code ...

%% LIFT + DRAG VS PHASE ANGLE VS AOA
for v = 1:length(unique_velocities)
    current_velocity = unique_velocities(v);
    
    % Filter data for the current velocity
    current_velocity_data = sorted_data(velocity == current_velocity, :);
    
    % Extract relevant columns
    lift_mean_current_velocity = current_velocity_data(:, 1);
    drag_mean_current_velocity = current_velocity_data(:, 2);
    phase_angle_current_velocity = current_velocity_data(:, 3);
    aoa_current_velocity = current_velocity_data(:, 5);
    
    % Plot lift vs phase angle for each AOA
    figure('Units', 'centimeters', 'Position', [10, 10, 12, 10]);
    hold on;
    unique_aoas = unique(aoa_current_velocity);
    
    for a = 1:length(unique_aoas)
        % Filter data for the current AOA
        current_aoa_data = current_velocity_data(aoa_current_velocity == unique_aoas(a), :);
        
        % Extract phase angle and lift for the current AOA
        phase_angle_current = current_aoa_data(:, 3);
        lift_current = current_aoa_data(:, 1);
        
        % Plot lift
        plot(phase_angle_current, lift_current, 'o-', 'LineWidth', 1.5, 'DisplayName', sprintf('AOA = %.1f deg', unique_aoas(a)));
    end
    
    title(sprintf('Lift vs Phase Angle for Velocity = %.1f m/s', current_velocity), 'Interpreter', 'latex');
    xlabel('Phase Angle (deg)', 'Interpreter', 'latex');
    ylabel('Lift Mean (N)', 'Interpreter', 'latex');
    legend('show', 'Location', 'best');
    grid on; box on; grid minor;
    xlim([0, 360]);
    ax = gca;
    ax.XMinorTick = 'on';
    ax.XAxis.MinorTickValues = 0:40:360;
    ax.XTick = 0:40:360; % Set major axis to have 40 deg increments
    hold off;
    
    % Plot drag vs phase angle for each AOA
    figure('Units', 'centimeters', 'Position', [10, 10, 12, 10]);
    hold on;
    
    for a = 1:length(unique_aoas)
        % Filter data for the current AOA
        current_aoa_data = current_velocity_data(aoa_current_velocity == unique_aoas(a), :);
        
        % Extract phase angle and drag for the current AOA
        phase_angle_current = current_aoa_data(:, 3);
        drag_current = current_aoa_data(:, 2);
        
        % Plot drag
        plot(phase_angle_current, drag_current, 'x-', 'LineWidth', 1.5, 'DisplayName', sprintf('AOA = %.1f deg', unique_aoas(a)));
    end
    
    title(sprintf('Drag vs Phase Angle for Velocity = %.1f m/s', current_velocity), 'Interpreter', 'latex');
    xlabel('Phase Angle (deg)', 'Interpreter', 'latex');
    ylabel('Drag Mean (N)', 'Interpreter', 'latex');
    legend('show', 'Location', 'best');
    grid on; box on; grid minor;
    xlim([0, 360]);
    ax = gca;
    ax.XMinorTick = 'on';
    ax.XAxis.MinorTickValues = 0:40:360;
    ax.XTick = 0:40:360; % Set major axis to have 40 deg increments
    hold off;
end

% ... existing code ...